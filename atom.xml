<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luffyao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.luffyao.com/"/>
  <updated>2020-01-04T03:06:06.173Z</updated>
  <id>https://www.luffyao.com/</id>
  
  <author>
    <name>Luffyao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解iptables工作原理</title>
    <link href="https://www.luffyao.com/2019/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3iptables%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>https://www.luffyao.com/2019/12/深入理解iptables工作原理/</id>
    <published>2019-12-25T01:10:41.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
      <category term="iptables" scheme="https://www.luffyao.com/categories/iptables/"/>
    
    
      <category term="iptables" scheme="https://www.luffyao.com/tags/iptables/"/>
    
      <category term="netfilter" scheme="https://www.luffyao.com/tags/netfilter/"/>
    
  </entry>
  
  <entry>
    <title>gerrit自动添加reviewers</title>
    <link href="https://www.luffyao.com/2019/12/gerrit%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0reviewers/"/>
    <id>https://www.luffyao.com/2019/12/gerrit自动添加reviewers/</id>
    <published>2019-12-20T14:02:36.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我想用过gerrit的同学都知道，这个真的是个神code review工具，可以verify, view,还可以cherry-pick等等功能。这里我不做过多解释。有需要的可以自行百度了解基本知识。&lt;br&gt;
    
    </summary>
    
      <category term="Others" scheme="https://www.luffyao.com/categories/Others/"/>
    
    
      <category term="Gerrit" scheme="https://www.luffyao.com/tags/Gerrit/"/>
    
  </entry>
  
  <entry>
    <title>谈谈我对CSDN的个人感受</title>
    <link href="https://www.luffyao.com/2019/12/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9CSDN%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%84%9F%E5%8F%97/"/>
    <id>https://www.luffyao.com/2019/12/谈谈我对CSDN的个人感受/</id>
    <published>2019-12-14T05:22:05.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CSDN尽然拒绝了我这篇文章的发表！！！ Are you kidding me?&lt;/strong&gt; \&lt;br&gt;&lt;img src=&quot;/images/csdn.png&quot; alt=&quot;&amp;quot;csdn拒绝了这篇文章&amp;quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常随笔" scheme="https://www.luffyao.com/categories/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://www.luffyao.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>C++ 17 尝鲜之 the overload pattern</title>
    <link href="https://www.luffyao.com/2019/12/C-17-%E5%B0%9D%E9%B2%9C%E4%B9%8B-the-overload-pattern/"/>
    <id>https://www.luffyao.com/2019/12/C-17-尝鲜之-the-overload-pattern/</id>
    <published>2019-12-08T02:49:58.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以前在C++98的时候，咱们想要操作符重载怎么办？我们一般都是会将想要重载的操作符在自己的class或者struct里面写一遍。&lt;/p&gt;
&lt;p&gt;一般大家写出来的代码无非和我的差不多。&lt;br&gt;
    
    </summary>
    
      <category term="CPlusPlus" scheme="https://www.luffyao.com/categories/CPlusPlus/"/>
    
    
      <category term="C++17" scheme="https://www.luffyao.com/tags/C-17/"/>
    
  </entry>
  
  <entry>
    <title>C++17 尝鲜之 structured bindings</title>
    <link href="https://www.luffyao.com/2019/12/C-17-%E5%B0%9D%E9%B2%9C%E4%B9%8B-structured-bindings/"/>
    <id>https://www.luffyao.com/2019/12/C-17-尝鲜之-structured-bindings/</id>
    <published>2019-12-08T02:44:12.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;老版本的C++函数返回值都是只有一个内嵌类型或者自定义类型。所以 以前 我们如果想要返回多个值，就必须将其封装为struct， 然后在将其返回。&lt;br&gt;
    
    </summary>
    
      <category term="CPlusPlus" scheme="https://www.luffyao.com/categories/CPlusPlus/"/>
    
    
      <category term="C++17" scheme="https://www.luffyao.com/tags/C-17/"/>
    
  </entry>
  
  <entry>
    <title>如何抓取pod中的container的tcpdump</title>
    <link href="https://www.luffyao.com/2019/12/%E5%A6%82%E4%BD%95%E6%8A%93%E5%8F%96pod%E4%B8%AD%E7%9A%84container%E7%9A%84tcpdump/"/>
    <id>https://www.luffyao.com/2019/12/如何抓取pod中的container的tcpdump/</id>
    <published>2019-12-07T10:44:49.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一般情况下，想要抓取pod中的某个container的tcpdump，直接kubectl exec 进入那个container，然后就可以抓取了。但是如果当你的image没有安装bash等shell terminal，那我们就不能使用exec进入container了。所以此时我们就需要以下方法，通过自己编一个带有shell的image，然后docker exec 嵌入到pod中，再进行抓取tcpdump。&lt;br&gt;
    
    </summary>
    
      <category term="MicroService" scheme="https://www.luffyao.com/categories/MicroService/"/>
    
    
      <category term="Docker" scheme="https://www.luffyao.com/tags/Docker/"/>
    
      <category term="tcpdump" scheme="https://www.luffyao.com/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>如何在pod中的container里面生成coredump文件并拷贝出来使用GDB debug</title>
    <link href="https://www.luffyao.com/2019/12/%E5%A6%82%E4%BD%95%E5%9C%A8pod%E4%B8%AD%E7%9A%84container-%E9%87%8C%E9%9D%A2%E7%94%9F%E6%88%90coredump-%E6%96%87%E4%BB%B6-%E5%B9%B6%E6%8B%B7%E8%B4%9D%E5%87%BA%E6%9D%A5%E4%BD%BF%E7%94%A8GDB-debug/"/>
    <id>https://www.luffyao.com/2019/12/如何在pod中的container-里面生成coredump-文件-并拷贝出来使用GDB-debug/</id>
    <published>2019-12-02T13:35:01.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;为什么会记录这篇文章呢，是因为在工作中，遇到了这个问题，由于我们这个是C++写的代码，crash tracing 并没有golang好，所以代码crash在pod中的container里面，很难调查。最多的也就是多加log，但是你懂的，添加log debug效率还是蛮低的。所以就要用coredump 去快速找到问题所在。但是就遇到文章的问题。你怎么去pod中的container生成coredump呢，然后拷到本地gdb呢?&lt;br&gt;
    
    </summary>
    
      <category term="MicroService" scheme="https://www.luffyao.com/categories/MicroService/"/>
    
    
      <category term="Docker" scheme="https://www.luffyao.com/tags/Docker/"/>
    
      <category term="coredump" scheme="https://www.luffyao.com/tags/coredump/"/>
    
  </entry>
  
  <entry>
    <title>Profiling  C++ with Perf in the linux Env</title>
    <link href="https://www.luffyao.com/2019/12/Profiling-C-with-Perf-in-the-linux-Env/"/>
    <id>https://www.luffyao.com/2019/12/Profiling-C-with-Perf-in-the-linux-Env/</id>
    <published>2019-12-01T12:32:51.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Installation-perf&quot;&gt;&lt;a href=&quot;#Installation-perf&quot; class=&quot;headerlink&quot; title=&quot;Installation perf&quot;&gt;&lt;/a&gt;Installation perf&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uname -r    # check your system tools version for the third command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install linux-tools-common&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install linux-tools-4.15.0-47-generic linux-cloud-tools-4.15.0-47-generic&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="MicroService" scheme="https://www.luffyao.com/categories/MicroService/"/>
    
    
      <category term="Profil" scheme="https://www.luffyao.com/tags/Profil/"/>
    
      <category term="C++" scheme="https://www.luffyao.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>how to install Docker CE in the Ubuntu 18.04</title>
    <link href="https://www.luffyao.com/2019/12/how-to-install-Docker-CE-in-the-Ubuntu-18-04/"/>
    <id>https://www.luffyao.com/2019/12/how-to-install-Docker-CE-in-the-Ubuntu-18-04/</id>
    <published>2019-12-01T11:39:15.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;following-offical-docs-to-install-it-a-perfect-method&quot;&gt;&lt;a href=&quot;#following-offical-docs-to-install-it-a-perfect-method&quot; class=&quot;headerlink&quot; title=&quot;following offical docs to install it a perfect method.&quot;&gt;&lt;/a&gt;following offical docs to install it a perfect method.&lt;/h2&gt;&lt;p&gt;Docker CE offcial docs : &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker offical docs&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MicroService" scheme="https://www.luffyao.com/categories/MicroService/"/>
    
    
      <category term="Docker" scheme="https://www.luffyao.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>github上将源repo提交更新到fork的repo</title>
    <link href="https://www.luffyao.com/2019/12/github%E4%B8%8A%E5%B0%86%E6%BA%90repo%E6%8F%90%E4%BA%A4%E6%9B%B4%E6%96%B0%E5%88%B0fork%E7%9A%84repo/"/>
    <id>https://www.luffyao.com/2019/12/github上将源repo提交更新到fork的repo/</id>
    <published>2019-12-01T07:39:15.000Z</published>
    <updated>2020-01-04T03:06:06.173Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在github上 一般我们都是将别人的repo fork到自己的github repo。 然后阅读，修改 甚至是contribution。所以同步源repo的commit 尤为重要。因为你要始终保持与源repo同步。下面将描述下怎么去同步更新的步骤。&lt;br&gt;
    
    </summary>
    
      <category term="github" scheme="https://www.luffyao.com/categories/github/"/>
    
    
      <category term="github" scheme="https://www.luffyao.com/tags/github/"/>
    
      <category term="git" scheme="https://www.luffyao.com/tags/git/"/>
    
  </entry>
  
</feed>
